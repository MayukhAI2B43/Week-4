//C CODE :-
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* insertEnd(struct Node* head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;

    if (head == NULL) {  // Empty list
        newNode->next = newNode;
        return newNode;
    }

    struct Node* temp = head;
    while (temp->next != head) {
        temp = temp->next;
    }

    temp->next = newNode;
    newNode->next = head;
    return head;
}

void printCLL(struct Node* head) {
    if (head == NULL) return;

    struct Node* temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(back to head)\n");
}

int main() {
    struct Node* head = NULL;

    head = insertEnd(head, 10);
    head = insertEnd(head, 20);
    head = insertEnd(head, 30);

    printf("Circular Linked List:\n");
    printCLL(head);

    return 0;
}




























#PYTHON CODE :-
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def insert_end(head, data):
    new_node = Node(data)

    if not head:  # Empty list
        new_node.next = new_node
        return new_node

    temp = head
    while temp.next != head:
        temp = temp.next

    temp.next = new_node
    new_node.next = head
    return head

def print_cll(head):
    if not head:
        return
    temp = head
    while True:
        print(temp.data, end=" -> ")
        temp = temp.next
        if temp == head:
            break
    print("(back to head)")

# Example
head = None
head = insert_end(head, 10)
head = insert_end(head, 20)
head = insert_end(head, 30)

print("Circular Linked List:")
print_cll(head)
