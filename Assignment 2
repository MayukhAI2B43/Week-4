#PYTHON CODE :-
class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

def delete_node(head, key):
    temp = head

    # Find the node
    while temp and temp.data != key:
        temp = temp.next

    if not temp:
        return head  # Key not found

    # If deleting head
    if temp.prev is None:
        head = temp.next
        if head:
            head.prev = None
    else:
        temp.prev.next = temp.next

    if temp.next:
        temp.next.prev = temp.prev

    return head

def print_dll(head):
    while head:
        print(head.data, end=" <-> ")
        head = head.next
    print("NULL")

# Example
head = Node(10)
node2 = Node(20)
node3 = Node(30)
head.next = node2
node2.prev = head
node2.next = node3
node3.prev = node2

print("Original DLL:")
print_dll(head)

head = delete_node(head, 20)
print("After deleting 20:")
print_dll(head)





































//C CODE :-
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

struct Node* deleteNode(struct Node* head, int key) {
    struct Node* temp = head;

    // Find node
    while (temp != NULL && temp->data != key)
        temp = temp->next;

    if (temp == NULL)
        return head; // Not found

    // If deleting head
    if (temp->prev == NULL) {
        head = temp->next;
        if (head != NULL)
            head->prev = NULL;
    } else {
        temp->prev->next = temp->next;
    }

    if (temp->next != NULL)
        temp->next->prev = temp->prev;

    free(temp);
    return head;
}

void printDLL(struct Node* head) {
    while (head != NULL) {
        printf("%d <-> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->prev = NULL;
    node->next = NULL;
    return node;
}

int main() {
    struct Node* head = newNode(10);
    struct Node* second = newNode(20);
    struct Node* third = newNode(30);

    head->next = second;
    second->prev = head;
    second->next = third;
    third->prev = second;

    printf("Original DLL:\n");
    printDLL(head);

    head = deleteNode(head, 20);

    printf("After deleting 20:\n");
    printDLL(head);

    return 0;
}
